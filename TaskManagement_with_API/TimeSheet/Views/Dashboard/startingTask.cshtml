
@{
    ViewData["Title"] = "startingTask";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
@model TimeSheet.Models.ViewModel.StartingTaskViewModel
@{ 
    var taskName = Model.currentTask.Select(x => x.TaskName).FirstOrDefault();
}
<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <!--Card Header-->
            <div class="card-header">
                <p>


                    <span class="float-left">

                        <span class="today">Processing Task : @taskName </span>


                    </span>
                </p>

            </div>
            <!--Card Body-->
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4">
                        <div class="circle">
                            <span class="today" id="digital-clock"></span>

                        </div>

                        <span class="today text-center">Remaning</span>

                    </div>
                    <div class="col-lg-4">

                    </div>

                    <div class="col-lg-4">
                        <div class="circle">
                            <span class="today" id="digital-clock-spent">
                                00:00:00
                            </span>
                        </div>

                        <span class="today text-center">Spent</span>
                   
                    </div>


                    <button class="btn btn-light" onclick="start()"><i class="fa fa-play"></i> Start</button>
                    <button class="btn btn-light" onclick="pause()"><i class="fa fa-stop"></i> Pause</button>
                    <button class="btn btn-light" onclick="location.href='@Url.Action("finish", new { id=@Model.currentTask[0].TaskId })'"><i class="fa fa-check-circle"></i> Finished</button>
                    <button class="btn btn-light" onclick="location.href='@Url.Action("remove", new { id=@Model.currentTask[0].TaskId })'"><i class="fa fa-trash"></i> Trash</button>

                </div>

                <br />
                @foreach (var data in Model.currentTask)
                {
                    <div class="form-group">
                        <label>Task Name</label>
                        <input type="text" placeholder="Task Name..." value="@data.TaskName" class="form-control" readonly/>
                    </div>
                    <div class="form-group">
                        <label>Task Description</label>
                        <input type="text" placeholder="Task Description..." value="@data.TaskDesc"  class="form-control" readonly/>
                    </div>
                    <div class="form-group">
                        <label>Hour</label>
                        <input type="number" placeholder="Hour..." value="@data.ScheduledHour" class="form-control" readonly/>
                    </div>
                    <div class="form-group">
                        <label>Minutes</label>
                        <input type="number" value="@data.ScheduledMin" class="form-control" readonly />
                    </div>
                }
            </div>


        </div>
    </div>
    <div class="col-lg-5">

        <!--Card-->
        <div class="card">
            <!--Card Header-->
            <div class="card-header">
                <p>
                    <button data-toggle="collapse" href="#collapseFiltering" role="button" aria-expanded="false" aria-controls="collapseExample" class="btn btn-light"> <i class="fa-solid fa-filter"></i> Filtering Options </button>
                </p>
                <p>
                    <a class="btn btn-light" href="/Dashboard/Index/"><i class="fa-solid fa-angles-left"></i> Go Back</a>
                </p>

                <div class="collapse" id="collapseFiltering">
                    <div class="input-group md-form form-sm form-2 pl-0">
                        <select class="form-control">
                            <option>Sort by latest</option>
                            <option>Show only completed tasks</option>
                            <option>Show only processing tasks</option>
                            <option>Show only trashed tasks</option>
                            <option>Sort by task duration ascending</option>
                            <option>
                                Sort by task duration
                                descdending
                            </option>
                        </select>
                    </div>
                    <br />
                    <button class="btn btn-light"><i class="fa fa-check"></i> Apply</button>
                </div>


            </div>
            <!--Card Body-->
            <div class="card-body">
                <p class="heading1">
                    <span class="today">Completed Tasks</span>
                    <span class="float-right headingright"></span>

                </p>
                @foreach (var data in Model.completedTask)
                {
                    <p>
                        <i style="font-size:20px;color:#153063;" class="fa-solid fa-thumbtack md-2"></i>

                        <span style="font-size:22px;" class="task mt-4">Task name: @data.TaskName</span>
                        <br />
                        <span style="font-size:14px;" class="task mt-4">Task Description: @data.TaskDesc</span>
                        <br />
                        <span style="font-size:14px;" class="task mt-4">Task Duration: @data.ScheduledHour hour @data.ScheduledMin minutes</span>
                        <br />
                        <span style="font-size:14px;" class="task mt-4">Time Spent: @data.TimeSpent</span>
                

                    </p>
                    <button class="btn btn-light" onclick="location.href='@Url.Action("edit", new {id=@data.TaskId})'"><i class="fa fa-pen"></i> Edit</button>
                    <button class="btn btn-light" onclick="location.href='@Url.Action("continueTask", new {id=@data.TaskId})'"><i class="fa fa-play"></i> Continue</button>
                    <button class="btn btn-light" onclick="location.href='@Url.Action("remove", new {id=@data.TaskId})'"><i class="fa fa-trash"></i> Trash</button>
                }



            </div>
        </div>
    </div>

</div>


<style>
    .form-control:focus {
        border-color: #153063;
        box-shadow: inset 0 1px 1px #153063, 0 0 8px #153063;
    }

    .btn-light {
        background-color: #d3d9dd;
    }

    .circle {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 150px;
        width: 150px;
        border: 6px dotted;
        border-radius: 50%;
    }
</style>

@section Scripts {
    <script>
        var currentTask = (@Json.Serialize(@Model.currentTask))[0];
        
        var hour = currentTask.scheduledHour;
        var minute = currentTask.scheduledMin;
        var second = 0
        var spentTime = 0

        var intervalObject = null;
        $(document).ready(function () {
           
            currentTime = getDateTime(0, hour, minute);
            document.getElementById("digital-clock").innerHTML = currentTime;
        });
        function getDateTime(sTmp, hTmp, mTmp) {
            var secondTmp = sTmp
            var hourTmp = hTmp
            var minuteTmp = mTmp
            if (hourTmp.toString().length == 1) {
                hourTmp = '0' + hourTmp;
            }
            if (minuteTmp.toString().length == 1) {
                minuteTmp = '0' + minuteTmp;
            }
            if (secondTmp.toString().length == 1) {
                secondTmp = '0' + secondTmp;
            }
            var dateTime = hourTmp + ':' + minuteTmp + ':' + secondTmp;
            return dateTime;
        }

        function start() {
            intervalObject = setInterval(function () {
                timeCalculator()
                calculateSpentTime()
            }, 1000)
        }

        function pause() {
            if (intervalObject !== null) {
                clearInterval(intervalObject)
            }
        }

        function timeCalculator() {
            var date = new Date
            /*if (second !== 0 && second > 0) {
                second = second - 1;
            } else if (second === 0 && minute === 0) {
                minute = 59;
            } else if (second === 0 && minute >= 0 && hour >= 0) {
                second = 60
            } else if (second === 0 && minute === 0 && hour !== 0 && hour > 0) {
                hour = hour - 1;
            } else if (second === 0 && minute > 0) {
                minute = minute - 1;
            } else if (second === 0 && minute === 0 && hour === 0) {
                pause()
            }*/
            let totalSeconds = second + (minute * 60) + (hour * 3600);
            let { lastMinute, lastHour, lastSecond } = calculateTime(totalSeconds);
            if (totalSeconds === 0) {
                pause()
            }
            
            minute = lastMinute
            hour = lastHour
            second = lastSecond

            
            currentTime = getDateTime(second, hour, minute);
            document.getElementById("digital-clock").innerHTML = currentTime;
        }

        function calculateSpentTime () {
            spentTime = spentTime + 1
            let { lastMinute, lastHour, lastSecond } = calculateTime(spentTime, true);

            currentTime = getDateTime(lastSecond, lastHour, lastMinute);
            document.getElementById("digital-clock-spent").innerHTML = currentTime;
        }


        function calculateTime (totalSecond, isIncreased=false) {
           
            if (isIncreased) totalSeconds = totalSecond + 1
            else totalSecond = totalSecond - 1
            console.log(totalSecond)

            let leftHour = totalSecond / 3600;
            let leftMinute = (leftHour.toPrecision() * 60) % 60;
            let leftSeconds = (leftMinute.toPrecision() * 60) % 60;

            console.log(`hour: ${parseInt(leftHour)}, minute: ${parseInt(leftMinute)}, second: ${parseInt(leftSeconds)}`)
            return {
                "lastMinute": parseInt(leftMinute),
                "lastHour": parseInt(leftHour),
                "lastSecond": parseInt(leftSeconds)
            }

        }

    </script>
}


